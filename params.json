{"name":"acts_as_notifiable_redmine","tagline":" A gem which makes notifying your Redmine instance easy ;)","body":"## ![logo](https://raw.github.com/jbox-web/acts_as_notifiable_redmine/gh-pages/images/pusher_logo.png) A gem which makes notifying your Redmine instance easy ;)\r\n\r\n[![GitHub license](https://img.shields.io/github/license/jbox-web/active_use_case.svg)](https://github.com/jbox-web/active_use_case/blob/master/LICENSE)\r\n[![Gem](https://img.shields.io/gem/v/acts_as_notifiable_redmine.svg)](https://rubygems.org/gems/acts_as_notifiable_redmine)\r\n[![Gem](https://img.shields.io/gem/dv/acts_as_notifiable_redmine/0.1.1.svg)](https://rubygems.org/gems/acts_as_notifiable_redmine/versions/0.1.1)\r\n[![Code Climate](https://codeclimate.com/github/jbox-web/acts_as_notifiable_redmine.png)](https://codeclimate.com/github/jbox-web/acts_as_notifiable_redmine)\r\n[![Dependency Status](https://gemnasium.com/jbox-web/acts_as_notifiable_redmine.svg)](https://gemnasium.com/jbox-web/acts_as_notifiable_redmine)\r\n\r\nThis gem is designed to integrate the [Pusher Notification System](http://pusher.com) in Redmine but you may use it for other Rails apps ;)\r\n\r\nIt aims to provide a small DSL for plugin developers who want to use Pusher notifications for their Redmine plugins.\r\n\r\nTo achieve this, you should install first [Redmine Pusher Notifications](https://github.com/jbox-web/redmine_pusher_notifications) which actually install this gem and the [gritter](https://github.com/RobinBrouwer/gritter) gem.\r\n\r\nThen you just need to declare your channels and events in your ```init.rb``` file. That's all!\r\n\r\n## Requirements\r\n\r\n* Ruby 1.9.x or 2.0.x\r\n* a working [Redmine](http://www.redmine.org/) installation\r\n* a free account on [Pusher](http://pusher.com)\r\n* [pusher](https://github.com/pusher/pusher-gem) gem\r\n\r\n## Installation\r\n\r\n```ruby\r\ngem install acts_as_notifiable_redmine\r\n```\r\n\r\n## Usage\r\n\r\n**(1)** First you need to configure you Pusher account :\r\n\r\n```ruby\r\nActsAsNotifiableRedmine::Notifications.register_courier :pusher do\r\n  app_id    'xxxxx'\r\n  key       'xxxxxxxxxxxxxxxxxxxx'\r\n  secret    'xxxxxxxxxxxxxxxxxxxx'\r\n  encrypted true\r\nend\r\n```\r\n\r\n**Note :** If you're using Redmine Pusher Notifications plugin you don't need to do this. Instead, go to the plugin configuration page.\r\n\r\n**(2)** Then you need to register your channels and events : each channel can have many events.\r\nIt may also have an optional ```target``` parameter which can be a string or a Proc.\r\n\r\n```ruby\r\nActsAsNotifiableRedmine::Notifications.register_channel :channel_test do\r\n  target Proc.new { User.current.login }\r\n  event  :event1, :sticky => true\r\n  event  :event2, :sticky => false\r\n  event  :event3\r\nend\r\n\r\nActsAsNotifiableRedmine::Notifications.register_channel :broadcast do\r\n  target 'broadcast'\r\n  event  :event1, :sticky => true\r\n  event  :event2, :sticky => false\r\n  event  :event3\r\nend\r\n```\r\n\r\n**Note :** If you're using Redmine Pusher Notifications plugin this is done in ```init.rb``` file.\r\n\r\n**(3)** Once done, you can get the registered channels and events with :\r\n\r\n```ruby\r\nActsAsNotifiableRedmine::Notifications.channels.each do |name, channel|\r\n  puts \"#############\"\r\n  puts \"Channel :\"\r\n  puts \"name       : #{channel.name}\"\r\n  puts \"identifier : #{channel.identifier}\"\r\n  puts \"token      : #{channel.token}\"\r\n  puts \"events     :\"\r\n  channel.events.each do |event|\r\n    puts \"  * #{event.name} (sticky : #{event.sticky?})\"\r\n  end\r\n  puts \"\"\r\nend\r\n```\r\n\r\nTo get the Pusher parameters :\r\n\r\n```ruby\r\ncourier = ActsAsNotifiableRedmine::Notifications.courier\r\n\r\nputs \"#############\"\r\nputs \"Courier :\"\r\nputs \"name      : #{courier.name}\"\r\nputs \"app_id    : #{courier.app_id}\"\r\nputs \"key       : #{courier.key}\"\r\nputs \"secret    : #{courier.secret}\"\r\nputs \"encrypted : #{courier.encrypted}\"\r\n```\r\n\r\n**(4)** Finally to send notifications :\r\n\r\n```ruby\r\nActsAsNotifiableRedmine::Notifications.send_notification([channel.token], event.name, {:title => 'Hello!', :message => 'This is a test message !'})\r\n```\r\n\r\n**Note :** The logic to determine wether or not to send a notification is let to the developer. You can easily do this with callbacks :\r\n\r\n```ruby\r\nclass Comment < ActiveRecord::Base\r\n  has_many :watchers\r\n  after_create :send_notification\r\n\r\n  private\r\n\r\n    def send_notification\r\n      channels = []\r\n      watchers.each do |watcher|\r\n        token = '<channel_name>-' + watcher.login\r\n        channels.push(token)\r\n      end\r\n      ActsAsNotifiableRedmine::Notifications.send_notification(channels, <event_name>, {:title => 'Hello!', :message => 'This is a test message !'})\r\n    end\r\nend\r\n```\r\n\r\n**(5)** And to display them (put this in the layout) :\r\n\r\n```ruby\r\n<% if User.current.logged? %>\r\n\r\n  <%= javascript_tag do %>\r\n\r\n    $(document).ready(function() {\r\n      $.extend($.gritter.options, {\r\n        fade_in_speed: 'fast',\r\n        fade_out_speed: 'fast',\r\n        time: 6000,\r\n      });\r\n\r\n      $(function() {\r\n        var pusher = new Pusher('<%= ActsAsNotifiableRedmine::Notifications.courier.key %>');\r\n\r\n        <% ActsAsNotifiableRedmine::Notifications.channels.each do |name, channel| %>\r\n          var <%= j channel.identifier %> = pusher.subscribe('<%= channel.token %>');\r\n\r\n          <%= channel.identifier %>.bind('subscription_error', function(status) {\r\n            $.gritter.add({\r\n              title: 'Pusher : <%= channel.identifier %>',\r\n              text: 'Subscription error'\r\n            });\r\n          });\r\n\r\n          <% channel.events.each do |event| %>\r\n            <%= channel.identifier %>.bind('<%= event.name %>', function(data) {\r\n              $.gritter.add({\r\n                title: data.title,\r\n                text: data.message,\r\n                image: data.image,\r\n                sticky: <%= event.sticky? %>,\r\n              });\r\n            });\r\n\r\n          <% end %>\r\n\r\n        <% end %>\r\n\r\n      });\r\n    });\r\n  <% end %>\r\n<% end %>\r\n```\r\n\r\n**Note** : [gritter](https://github.com/RobinBrouwer/gritter) is not bundled with this gem. If you're using [Redmine Pusher Notifications](https://github.com/jbox-web/redmine_pusher_notifications) this part is already done by the plugin.\r\n\r\n## Contribute\r\n\r\nYou can contribute to this plugin in many ways such as :\r\n* Helping with documentation\r\n* Contributing code (features or bugfixes)\r\n* Reporting a bug\r\n* Submitting translations\r\n","google":"UA-36504891-3","note":"Don't delete this file! It's used internally to help with page regeneration."}